/* tslint:disable */
import {<%
var loaded = {};
Object.keys(model.sharedClass.ctor.relations).forEach((relation, i, arr) => {
  if (!loaded[model.sharedClass.ctor.relations[relation].targetClass] && 
      models[model.sharedClass.ctor.relations[relation].targetClass]) {
  loaded[model.sharedClass.ctor.relations[relation].targetClass] = true;%>
  <%-
  model.sharedClass.ctor.relations[relation].targetClass %><%= i < arr.length -1 ? ',' : '' %><%
  }
});%>
} from '../index';

export interface <%- modelName %>Interface {
<% for (var property in model.properties) { var meta = model.properties[property]; -%>
  <% if (meta.description) { %>
  /**
   * <%- meta.description %>
   */<% } %>
  <%- property %><%= meta.required ? '' : '?' -%>: <%- getModelType(meta.type) %>;
  <%
  } // for property in model.properties -%>

  <% Object.keys(model.sharedClass.ctor.relations).forEach(relation => {
  %><%- relation %>?:<%
  var type = (models[model.sharedClass.ctor.relations[relation].targetClass]) ? model.sharedClass.ctor.relations[relation].targetClass : 'any';
  if (model.sharedClass.ctor.relations[relation].type.match(/(^has$|belongsTo)/g)) {%><%- type %><%} else { %> Array<<%- type %>><% } %>;<%
  }); // for property in model.relations -%>

}

export class <%- modelName %> implements <%- modelName %>Interface {
  <% for (var property in model.properties) { var meta = model.properties[property]; -%>
  <% if (meta.description) { %>
  /**
   * <%- meta.description %>
   */<% } %>
  <%- property %>: <%- getModelType(meta.type) %>;<%
  } // for property in model.properties -%>
  
  <% Object.keys(model.sharedClass.ctor.relations).forEach(relation => {
  %><%- relation %>:<%
  var type = (models[model.sharedClass.ctor.relations[relation].targetClass]) ? model.sharedClass.ctor.relations[relation].targetClass : 'any';
  if (model.sharedClass.ctor.relations[relation].type.match(/(^has$|belongsTo)/g)) {%><%- type %><%} else { %> Array<<%- type %>><% } %>;<%
  }); // for property in model.relations -%>

  constructor(instance?: <%- modelName %>) {
    Object.assign(this, instance);
  }
}

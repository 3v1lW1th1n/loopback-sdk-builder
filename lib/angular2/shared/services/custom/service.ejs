/* tslint:disable */
import { Injectable, Inject, Optional } from '@angular/core';
import { Http, Response } from '@angular/http';
import {
  LoopBackAuth,
  ErrorHandler,
  JSONSearchParams,
  BaseLoopBackApi,
} from '../core/index';
import {
<%- buildServiceImports(modelName, model.methods) %>
} from '../../models/index';
import { LoopBackConfig } from '../../lb.config';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/share';

/**
 * Api services for the `<%-: modelName %>` model.
<% if ( model.description ){ -%>
 *
 * **Details**
 *
 * <%-: model.description | replace:/\n/gi, '\n * ' %>
<% } -%>
 */
@Injectable()
export class <%-: modelName %>Api extends BaseLoopBackApi {

  constructor(
    @Inject(Http) http: Http,
    @Inject(LoopBackAuth) protected auth: LoopBackAuth, 
    @Inject(JSONSearchParams) protected searchParams: JSONSearchParams, 
    @Optional() @Inject(ErrorHandler) errorHandler: ErrorHandler
  ) {
    super(http, auth, searchParams, errorHandler);
  }
<% model.methods.forEach(function(action) {
 
  var methodName = action.name.split('.').join('$').replace('prototype$', '').replace(/::/g, '__');
  var httpVerb = action.getEndpoints ? action.getEndpoints()[0].verb : action.getHttpMethod();
  var fullPath = action.getEndpoints ? action.getEndpoints()[0].fullPath : action.getFullPath();

  if (!model.sharedClass.ctor.settings.sdk.blacklist[methodName]) {
  ngdocForMethod(modelName, methodName, action, httpVerb, fullPath); 

  // SET URL PARAMS
  var urlParams = action.accepts.filter(function(param) {
    return !(param.arg === "access_token" && methodName === "logout") && !(param.http && param.http.source === 'path');
  });
  // SET POST BODY
  var postData;
  if (httpVerb == 'POST' || httpVerb == 'PUT' || httpVerb == 'PATCH') {
    postData = action.accepts.filter(function(param) {
      return !(param.http && (param.http.source == 'query' || param.http.source == 'path'))
        && !(param.arg === "access_token" && methodName === "logout");
    });
  }
  // SET ROUTE PARAMS
  var routeParams = action.accepts.filter(function(param) {
    return (param.http && param.http.source === 'path') || (param.arg === 'id');
  });
-%>
  public <%- normalizeMethodName(methodName) %>(<%- buildMethodParams(methodName, action.accepts) %>) {
    let method: string = <%-: httpVerb | q %>;
    let url: string = LoopBackConfig.getPath() + "/" + LoopBackConfig.getApiVersion() + <%-: fullPath | q %>;
    let routeParams: any = {<%- buildRouteParams(routeParams) %>};
    let postBody: any = {<%- buildPostBody(postData) %>};
    let urlParams: any = {};<%-
    buildUrlParams(model, methodName, urlParams) %><%
    if (model.isUser && methodName === 'logout') { %>
    this.auth.clearStorage();
    this.auth.clearUser(); <%
    } -%>

    let result = this.request(method, url, routeParams, urlParams, postBody)<%
if (model.isUser && methodName === 'login') { %>
      .share();
      result.subscribe(
        (response: { id: string, userId: string, user: any }) => {
          this.auth.setUser(response.id, response.userId, response.user);
          this.auth.setRememberMe(true);
          this.auth.save();
        },
        () => null
      );
      return result;
      <%
} else if (methodName.match(/(^create$)/g)) { %>
    return result.map((result: <%- modelName %> | Array<<%- modelName %>>) => Array.isArray(result)
                             ? result.map((instance: <%- modelName %>)=> new <%-: modelName %>(instance))
                             : new <%-: modelName %>(result));<%
} else if (methodName.match(/(upsert|findById|findOne)/g)) { %>
    return result.map((result: <%- modelName %>) => new <%-: modelName %>(result));<%
} else if (methodName.match(/(^find)/g)) { %>
    return result.map(
      (result: Array<<%- modelName %>>) => result.map((instance: <%- modelName %>) => new <%-: modelName %>(instance))
    );<%
} else { %>;
    return result;<%
} %>
  }
<% if ( isIo === 'enabled' && 
       (model.sharedClass.ctor.settings.mixins && model.sharedClass.ctor.settings.mixins.PubSub) && 
      !methodName.match(/log(in|out)/g)  &&
       methodName !== 'resetPassword' &&
       httpVerb !== 'GET' &&
       httpVerb !== 'HEAD'){
-%>

  public on<%- normalizeMethodName(methodName, true) %>(<%- buildMethodParams(methodName, action.accepts) %>) {
    let method: string = <%-: httpVerb | q %>;
    let url: string = LoopBackConfig.getPath() + "/" + LoopBackConfig.getApiVersion() + <%-: fullPath | q %>;
    let routeParams: any = {<%- buildRouteParams(routeParams.filter(function(param) { return param.arg !== 'fk'; })) %>};
    let postBody: any = {};
    let urlParams: any = {};
    let result = this.request(method, url, routeParams, urlParams, postBody, true);
    return result;
  }
<% }} -%>
<% }); // model.methods.foreach -%>
<% if (model.isUser) { -%>
  /**
   * @ngdoc method
   * @name <%- moduleName %>.<%- modelName %>#getCurrent
   * @methodOf <%- moduleName %>.<%- modelName %>
   *
   * @description
   *
   * Get data of the currently logged user. Fail with HTTP result 401
   * when there is no user logged in.
   *
   * @returns object An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   */
  public getCurrent(): any {
    let method: string = "GET";
    let url: string = LoopBackConfig.getPath() + "/" + LoopBackConfig.getApiVersion() + <%-: model.getPath() | q %> + "/:id";
    let id: any = this.auth.getCurrentUserId();
    if (id == null)
    id = '__anonymous__';
    let routeParams: any = { id: id };
    let urlParams: any = {};
    let postBody: any = {};
    return this.request(method, url, routeParams, urlParams, postBody);
  }
<% } -%>

<% if (model.isUser) { -%>
  /**
   * Get data of the currently logged user that was returned by the last
   * call to {@link <%- moduleName %>.<%- modelName %>#login} or
   * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
   * is no user logged in or the data of the current user were not fetched
   * yet.
   *
   * @returns object A <%- modelName %> instance.
   */
  public getCachedCurrent() {
    return this.auth.getCurrentUserData();
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
   *
   * @returns {boolean} True if the current user is authenticated (logged in).
   */
  public isAuthenticated() {
    return !(this.getCurrentId() === '' || this.getCurrentId() == null || this.getCurrentId() == 'null');
  }

  /**
   * @name <%- moduleName %>.<%- modelName %>#getCurrentId
   *
   * @returns object Id of the currently logged-in user or null.
   */
  public getCurrentId() {
    return this.auth.getCurrentUserId();
  }
<% } -%>

  /**
   * The name of the model represented by this $resource,
   * i.e. `<%- modelName %>`.
   */
  public getModelName() {
    return <%-: modelName | q %>;
  }
}
<%
function getJsDocType(arg) {
  return arg.type;
}

function ngdocForMethod(modelName, methodName, action, httpVerb, fullPath) {
   // always add an empty line before the ngdoc comment:
-%>

  /**
<% if (action.deprecated) { -%>
   * @deprecated <%- action.deprecated %>
<% } -%>
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
   * <%-: action.description | replace:/\n/g, '\n         * ' %>
<%
var params = action.accepts;
var postData;
if (httpVerb == 'POST' || httpVerb == 'PUT' || httpVerb == 'PATCH') {
  params = params.filter(function(arg) {
    return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
  });
  postData = action.accepts.filter(function(arg) {
    return params.indexOf(arg) == -1;
  });
}
-%>
<% if (params.length != 0) {
  params.forEach(function(arg) { -%>
   *
   * @param <%- getJsDocType(arg)  %> <%- arg.arg %> <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (model.isUser && methodName === 'login' && arg.arg === 'include') { -%>
   *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (model.isUser && methodName === 'login') { -%>
   *
   *  - `rememberMe` - `boolean` - Whether the authentication credentials
   *     should be remembered in localStorage across app/browser restarts.
   *     Default: `true`.
<% } -%>
<% if (postData) { -%>
   *
   * @param object data Request data.
<% if (postData.length == 0) { -%>
   *
   * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
      postData[0].http.source == 'body') { -%>
   *
   * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
  }
} -%>
   *
<% var returnType = action.isReturningArray() ? 'object[]': 'object'; -%>
   * @returns <%- returnType %> An empty reference that will be
   *   populated with the actual data once the response is returned
   *   from the server.
   *
<% if (!action.returns || action.returns.length == 0) { -%>
   * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
   * <%- action.returns[0].description
.replace(/\n/g, '\n   * ').trimRight() %>
<%   } else { -%>
   * <em>
   * (The remote method definition does not provide any description.
   * This usually means the response is a `<%- modelName %>` object.)
   * </em>
<%   } -%>
<% } else { -%>
   * Data properties:
<%   action.returns.forEach(function(arg) { -%>
   *
   *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
   */
<% } // end of ngdocForMethod -%>